---
import Menu from './Menu.astro'
import '@styles/header.sass'
import '@styles/editor.sass'
import '@styles/notes.sass'
---

<header class="editor-header">
	<button class="export">save as file</button>
	<Menu />
</header>
<main></main>
<script>
	import { Editor, rootCtx } from '@milkdown/kit/core'
	import { clipboard } from '@milkdown/kit/plugin/clipboard'
	import { history } from '@milkdown/kit/plugin/history'
	import { indent } from '@milkdown/kit/plugin/indent'
	import { listener, listenerCtx } from '@milkdown/kit/plugin/listener'
	import { upload } from '@milkdown/kit/plugin/upload'
	import { commonmark } from '@milkdown/kit/preset/commonmark'
	import { getMarkdown } from '@milkdown/utils'
	import { getNotes } from '@stubs/notes'
	import { exportFile } from '@utils/exportFile'
	import { getShortDate } from '@utils/getShortDate'
	import { load } from '@utils/load'
	import { save } from '@utils/save'

	const autosaveInterval = 5_000
	const rootEl: HTMLElement = document.getElementsByTagName('main')[0]
	const notes = getNotes()
	const hasNotes = notes?.length > 0

	let updated = false
	let editorEl: HTMLDivElement = null
	let empty = true

	const editor = await Editor.make()
		.use(commonmark)
		.use(history)
		.use(clipboard)
		.use(upload)
		.use(indent)
		.use(listener)
		.config((ctx) => {
			ctx.set(rootCtx, rootEl)
			const listener = ctx.get(listenerCtx)

			listener.mounted(() => {
				editorEl = (
					document.getElementsByClassName(
						'editor',
					) as HTMLCollectionOf<HTMLDivElement>
				)[0]
				if (hasNotes) editorEl.classList.add('collapsed')
				editorEl.ariaLabel = 'Your note'
			})

			listener.updated((ctx, doc) => {
				updated = true

				if (doc.content.size <= 2) {
					empty = true
					if (hasNotes) editorEl.classList.add('collapsed')
					setTimeout(() => {
						rootEl.classList.add('notes-shown')
					}, 50)
				} else {
					empty = false
					if (hasNotes) rootEl.classList.remove('notes-shown')
					setTimeout(() => {
						editorEl.classList.remove('collapsed')
					}, 50)
				}
			})
		})
		.create()

	const exportButtonEl = document.getElementsByClassName('export')[0]

	buildEditor(editor, notes)

	let saver = setInterval(() => {
		if (updated) {
			save(editor.action(getMarkdown()))
			updated = false
		}
	}, autosaveInterval)

	editorEl.focus()
	editorEl.addEventListener('visibilitychange', toggleAutosave)

	editorEl.addEventListener('keydown', (e) => {
		if ((e.ctrlKey || e.metaKey) && e.key === 's') {
			e.preventDefault()
			if (e.repeat) return
			if (e.shiftKey) {
				exportFile(editor.action(getMarkdown()))
			} else {
				save(editor.action(getMarkdown()), 'shortcut')
			}
		}
		if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
			e.preventDefault()
			if (e.repeat) return
			rootEl.childNodes.forEach((el) =>
				(el as HTMLElement).classList.toggle('bordered'),
			)
		}
	})

	exportButtonEl.addEventListener('click', () => {
		exportFile(editor.action(getMarkdown()))
	})

	function toggleNotes(show: boolean) {
		if (show) {
			editorEl.classList.add('collapsed')
			setTimeout(() => {
				rootEl.classList.add('notes-shown')
			}, 50)
		} else {
			rootEl.classList.remove('notes-shown')
			setTimeout(() => {
				editorEl.classList.remove('collapsed')
			}, 50)
		}
	}

	function renderNotes(notes: Note[]) {
		const sortedNotes = notes.sort(
			(a, b) => b.modified.getTime() - a.modified.getTime(),
		)
		if (sortedNotes?.length > 0) {
			console.debug(sortedNotes)
			const notesEl = document.createElement('ul')
			notesEl.classList.add('notes')

			rootEl.appendChild(notesEl)
			for (const note of sortedNotes) {
				const noteEl = document.createElement('li')
				const noteNameEl = document.createElement('span')
				const noteDateEl = document.createElement('span')
				noteNameEl.className = 'name'
				noteDateEl.className = 'date'
				noteNameEl.innerText = note.name
				noteDateEl.innerText = getShortDate(note.modified)

				noteEl.appendChild(noteNameEl)
				noteEl.appendChild(noteDateEl)
				notesEl.appendChild(noteEl)
			}
		}
	}

	function buildEditor(
		editor: Editor,
		notes: Note[],
		notesAreNotStub: boolean = false,
	) {
		if (notesAreNotStub) {
			if (notes?.length > 1) {
				renderNotes(notes)
				toggleNotes(true)
			} else load(editor)
		} else {
			// Remove this behaviour
			// after multi-notes release
			renderNotes(notes)
			if (!load(editor)) toggleNotes(true)
		}
	}

	function toggleAutosave() {
		if (document.hidden) {
			clearInterval(saver)
		} else {
			saver = setInterval(() => {
				save(editor.action(getMarkdown()))
			}, autosaveInterval)
		}
	}
</script>
