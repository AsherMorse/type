---
import '@styles/header.sass'
import '@styles/editor.sass'
import '@styles/notes.sass'
import { Icon } from 'astro-icon/components'
import { modes } from '@utils/modes'
import Instructions from '@components/Instructions.astro'
import Shortcuts from '@components/Shortcuts.astro'
---

<header class="editor-header">
	<div class="left" data-context="notes">
		<form>
			<input type="file" multiple accept=".md,.txt" id="upload" />
		</form>
		<button class="back"><Icon name="back" /></button>
		<button class="add"><Icon name="add" /></button>
	</div>
	<div class="right">
		<div class="state">saved</div>
		<div class="more">
			<button class="show-more"><Icon name="more" /></button>
			<ul class="more-menu">
				<li class="hidden">
					<button class="publish">Publish</button>
				</li>
				<li class="hidden">
					<button class="download">Download</button>
				</li>
				<li><button class="export-all">Export all</button></li>
				<li class="hidden">
					<button class="edit">Copy and edit</button>
				</li>
				<li><hr /></li>
				{
					Object.entries(modes).map(([name, values]) => (
						<li>
							<button class={name}>
								<span>
									{name.charAt(0).toUpperCase() +
										name.substring(1).toLowerCase()}
								</span>
								<span class="value">{values[0]}</span>
							</button>
						</li>
					))
				}
				<li>
					<button class="spell"
						><span>Spellcheck</span><span class="value">on</span
						></button
					>
				</li>
				<li><hr /></li>
				<li>
					<button
						class="md-help"
						data-micromodal-trigger="modal-instructions"
						>How to markdown</button
					>
				</li>
				<li>
					<button
						class="shortcuts"
						data-micromodal-trigger="modal-shortcuts"
						>Shortcuts</button
					>
				</li>
				<li>
					<a href="/hello">About</a>
				</li>
				<!-- <li class="credit">
					byÂ <a href="https://qurle.net">qurle</a>
				</li> -->
			</ul>
		</div>
	</div>
</header>
<main></main>
<Instructions />
<Shortcuts />
<script>
	// Sorry for writing almost EVERYTHING here
	import { Editor, rootCtx } from '@milkdown/kit/core'
	import { clipboard } from '@milkdown/kit/plugin/clipboard'
	import { history } from '@milkdown/kit/plugin/history'
	import { indent } from '@milkdown/kit/plugin/indent'
	import { listener, listenerCtx } from '@milkdown/kit/plugin/listener'
	import { upload } from '@milkdown/kit/plugin/upload'
	import { commonmark } from '@milkdown/kit/preset/commonmark'
	import { automd } from '@milkdown/plugin-automd'
	import { replaceAll } from '@milkdown/utils'
	import { buildEditor } from '@utils/buildEditor'
	import { getCurrent, setCurrent } from '@utils/current'
	import { debug } from '@utils/debug'
	import { del } from '@utils/del'
	import { exportAll, exportFile } from '@utils/export'
	import { getByClass, getByTag } from '@utils/getElement'
	import { getNotes } from '@utils/getNotes'
	import { getOpfs } from '@utils/getOpfs'
	import { isEmptyNote } from '@utils/isEmptyNote'
	import { loadToEditor } from '@utils/loadToEditor'
	import { currentMode, cycleModes } from '@utils/modes'
	import { publish } from '@utils/publish'
	import { setFocus } from '@utils/setFocus'
	import { setTitle } from '@utils/setTitle'
	import { showState } from '@utils/showState'
	import { writeToFile, type SaveRef } from '@utils/writeToFile'
	import MicroModal from 'micromodal'
	import { nanoid } from 'nanoid/non-secure'

	MicroModal.init({ disableFocus: true, debug: false })

	// Utilities
	const autosaveInterval = 5_000
	// Elements
	const headerEl = getByTag('header')
	const headerLeftEl = getByClass('left', headerEl)
	const uploadInputEl = getByTag('input', headerLeftEl) as HTMLInputElement
	const addEl = getByClass('add', headerLeftEl)
	const backEl = getByClass('back', headerLeftEl)
	const stateEl = getByClass('state', headerEl)
	const showMoreEl = getByClass('show-more', headerEl)
	const menuEl = getByClass('more-menu', headerEl)
	const downloadEl = getByClass('download', menuEl)
	const exportAllEl = getByClass('export-all', menuEl)
	const publishEl = getByClass('publish', menuEl)
	const editEl = getByClass('edit', menuEl)
	const fontEl = getByClass('font', menuEl)
	const themeEl = getByClass('theme', menuEl)
	const spellEl = getByClass('spell', menuEl)
	const rootEl = getByTag('main')

	// Other
	const opfs = await getOpfs()
	const notes = await getNotes(opfs)
	// Assinged selectors
	let editorEl: HTMLDivElement = null
	let notesEl: HTMLUListElement = null
	// States
	let updated = false
	let empty = true
	let hasNotes = notes?.length > 0
	let lastSave = Date.now()
	let locked = false

	console.debug(`Loading editor`)

	const editor = await Editor.make()
		.use(commonmark)
		.use(history)
		.use(clipboard)
		.use(upload)
		.use(indent)
		.use(listener)
		.use(automd)
		.config((ctx) => {
			ctx.set(rootCtx, rootEl)

			const listener = ctx.get(listenerCtx)

			listener.mounted(() => {
				editorEl = (
					document.getElementsByClassName(
						'editor',
					) as HTMLCollectionOf<HTMLDivElement>
				)[0]
				editorEl.spellcheck =
					localStorage.getItem('spell') === 'true' || false
				if (hasNotes) editorEl.classList.add('collapsed')
				editorEl.ariaLabel = 'Your note'
			})

			listener.updated((ctx, doc) => {
				updated = true
				const isEmpty = doc.content.size <= 2

				showMoreEl.classList.remove('active')

				if (isEmpty) {
					empty = true
					if (hasNotes) editorEl.classList.add('collapsed')
					setTimeout(() => {
						rootEl.classList.add('notes-shown')
					}, 50)
					headerLeftEl.dataset.context = 'notes'
					loadNotesList()

					setTitle()
					publishEl.parentElement.classList.add('hidden')
					downloadEl.parentElement.classList.add('hidden')
					exportAllEl.parentElement.classList.remove('hidden')
					setCurrent('', editorEl)
				} else {
					empty = false
					if (hasNotes) {
						notesEl.style.visibility = 'hidden'
						rootEl.classList.remove('notes-shown')
						notesEl.style.visibility = 'visible'
					}
					setTimeout(() => {
						editorEl.classList.remove('collapsed')
					}, 50)
					headerLeftEl.dataset.context = 'editor'
					if (!locked)
						publishEl.parentElement.classList.remove('hidden')
					downloadEl.parentElement.classList.remove('hidden')
					exportAllEl.parentElement.classList.add('hidden')
				}
			})
		})
		.create()

	// Loading note by UUID
	await loadByURL()

	let saver = startAutosave()

	notesEl = buildEditor(editor, notes, rootEl, editorEl)

	// Loading last opened document
	const current = getCurrent()
	if (current) {
		const note = notes.find((note) => note.id === current)
		if (note) {
			loadToEditor(editor, editorEl, rootEl, notesEl, note)
		}
	}

	setFocus(editorEl)
	document.addEventListener('visibilitychange', toggleAutosave)

	initShortcuts()

	editorEl.addEventListener('keydown', (e) => {
		if (e.key === 'ArrowDown' && empty && notesEl) {
			;(
				notesEl.firstElementChild.firstElementChild as HTMLButtonElement
			).focus()
		}
		if (e.key === 'ArrowUp' && empty && notesEl) {
			;(
				notesEl.lastElementChild.firstElementChild as HTMLButtonElement
			).focus()
		}
	})

	backEl.addEventListener('click', () => {
		save('clear')
		clearEditor()
	})

	addEl.addEventListener('click', () => {
		uploadInputEl.click()
	})

	uploadInputEl.addEventListener('change', (e: InputEvent) => {
		processFiles(uploadInputEl.files)
	})

	showMoreEl.addEventListener('click', () => {
		showMoreEl.classList.toggle('active')
	})

	// Hide menu
	document.documentElement.addEventListener('click', (e: MouseEvent) => {
		if (
			!menuEl.contains(e.target as Node) &&
			!showMoreEl.contains(e.target as Node)
		)
			showMoreEl.classList.remove('active')
	})

	publishEl.addEventListener('click', () => {
		if (empty) return
		save('publish', true)
		showMoreEl.classList.remove('active')
		publish(editor, editorEl, stateEl, getCurrent())
	})

	downloadEl.addEventListener('click', () => {
		if (empty) return
		showMoreEl.classList.remove('active')
		exportFile(editor, editorEl, stateEl)
	})
	exportAllEl.addEventListener('click', () => {
		showMoreEl.classList.remove('active')
		exportAll(opfs, stateEl)
	})

	editEl.addEventListener('click', () => {
		showMoreEl.classList.remove('active')
		unlock()
		save('copy')
	})

	window.addEventListener('beforeunload', () => {
		save('unload')
	})

	initNavigationListener()
	initModeCyclersListenters()
	initNotesListeners()
	initDragAndDrop()

	async function loadByURL() {
		const idEl = document.getElementById('id-storage')
		if (idEl && idEl.dataset.id) {
			editorEl.classList.add('loading')
			setCurrent('', editorEl)
			lock()
			const { content, clientId } = await fetch(
				`/api/getPublished?id=${idEl.dataset.id}`,
			)
				.then((response) => response.json())
				.catch(() => showState(stateEl, `couldn't load :(`))
			idEl.remove()
			editor.action(replaceAll(content))
			editorEl.classList.remove('loading')
			if (isEmptyNote(content)) return

			const firstBlock =
				(editorEl.children[0] as HTMLElement)?.innerText || ''
			if (isEmptyNote(firstBlock)) return
			setTitle(firstBlock)
		}
	}

	function initShortcuts() {
		document.addEventListener('keydown', (e) => {
			// Ctrl / Cmd actions
			if (e.ctrlKey || e.metaKey) {
				switch (e.code) {
					case 'KeyS': {
						e.preventDefault()
						if (e.repeat) return
						if (e.shiftKey) {
							if (empty) return
							exportFile(editor, editorEl, stateEl)
						} else {
							if (e.repeat) return
							if (empty) return
							save('shortcut')
						}
						return
					}
					case 'KeyP': {
						if (e.repeat) return
						if (e.shiftKey) {
							e.preventDefault()
							if (empty) return
							save('publish', true)
							publish(editor, editorEl, stateEl, getCurrent())
							return
						}
						break
					}
					case 'KeyE': {
						if (e.repeat) return
						if (e.shiftKey) {
							unlock()
							save('copy')
							return
						}
						break
					}
					case 'KeyD': {
						e.preventDefault()
						if (e.repeat) return
						debug(rootEl)
						return
					}
					// Mortal combat mode
					case 'KeyO': {
						e.preventDefault()
						if (e.repeat) return
						uploadInputEl.click()
						return
					}
				}
			} else {
				switch (e.code) {
					case 'Escape': {
						e.preventDefault()
						if (getByClass('is-open', document.body)) {
							return
						}
						if (showMoreEl.classList.contains('active')) {
							showMoreEl.classList.remove('active')
							editorEl.focus()
							return
						}
						save('clear')
						clearEditor()
						return
					}
				}
			}
		})
	}

	function initModeCyclersListenters() {
		const fontValueEl = getByClass('value', fontEl)
		const themeValueEl = getByClass('value', themeEl)
		const spellValueEl = getByClass('value', spellEl)

		fontValueEl.textContent = currentMode('font')
		themeValueEl.textContent = currentMode('theme')
		spellValueEl.textContent = editorEl.spellcheck ? 'on' : 'off'

		fontEl.addEventListener('click', () => {
			fontValueEl.textContent = cycleModes('font')
		})
		themeEl.addEventListener('click', () => {
			themeValueEl.textContent = cycleModes('theme')
		})
		spellEl.addEventListener('click', () => {
			editorEl.spellcheck = !editorEl.spellcheck
			spellValueEl.textContent = editorEl.spellcheck ? 'on' : 'off'
			localStorage.setItem('spell', editorEl.spellcheck.toString())
		})
	}

	function initDragAndDrop() {
		editorEl.addEventListener('dragover', (e) => {
			editorEl.classList.add('dragover')
		})
		editorEl.addEventListener('dragleave', () => {
			editorEl.classList.remove('dragover')
		})
		editorEl.addEventListener('drop', (e) => {
			editorEl.classList.remove('dragover')
			e.preventDefault()
			processFiles(e.dataTransfer.files)
		})
	}

	function initNotesListeners() {
		// Probably the worst code I ever wrote
		if (hasNotes) {
			;[
				...(notesEl.getElementsByClassName(
					'note',
				) as HTMLCollectionOf<HTMLButtonElement>),
			].forEach((noteEl) => {
				noteEl
					.getElementsByClassName('delete')[0]
					.addEventListener('click', (e: MouseEvent) => {
						e.stopPropagation()
						const confirmed = e.shiftKey
						del(noteEl, opfs, confirmed)
						loadNotesList()
					})

				noteEl.addEventListener('keydown', (e) => {
					const buttonEl = e.target as HTMLButtonElement
					if (e.key === 'ArrowDown' && empty && notesEl) {
						const nextLi = buttonEl.parentElement
							.nextElementSibling as HTMLLIElement
						if (nextLi)
							(
								nextLi.firstElementChild as HTMLButtonElement
							).focus()
						else editorEl.focus()
					}
					if (e.key === 'ArrowUp' && empty && notesEl) {
						const prevLi = buttonEl.parentElement
							.previousElementSibling as HTMLLIElement
						if (prevLi)
							(
								prevLi.firstElementChild as HTMLButtonElement
							).focus()
						else editorEl.focus()
					}
					if (
						(e.key === 'Backspace' || e.key === 'Delete') &&
						empty &&
						notesEl
					) {
						const nextLi = buttonEl.parentElement
							.nextElementSibling as HTMLLIElement

						const confirmed = e.shiftKey
						del(noteEl, opfs, confirmed)

						if (nextLi)
							(
								nextLi.firstElementChild as HTMLButtonElement
							).focus()
						else editorEl.focus()
					}
				})
			})
		}
	}

	function initNavigationListener() {
		window.addEventListener('popstate', (e) => {
			e.preventDefault()
			console.debug(e)
			if (e.state.page === null) {
				save('clear')
				clearEditor()
			}
		})
	}

	const nonExplicitSaveRefs: SaveRef[] = [
		'unload',
		'clear',
		'overwrite',
		'multiple-drop',
	]

	function save(ref: SaveRef, hidden = false) {
		if (locked) return false
		if ((!empty && updated) || nonExplicitSaveRefs.includes(ref)) {
			const currentId = getCurrent() || setCurrent(newId(), editorEl)
			console.debug(`Saving with ID: ${currentId} by ref "${ref}"`)
			writeToFile(editor, editorEl, opfs, currentId, stateEl, ref, hidden)
			updated = false
			return true
		}
		return false
	}

	function newId(length = 10) {
		const id = nanoid(length)
		console.debug(`Generated new ID: ${id}`)
		return id
	}

	function toggleAutosave() {
		if (document.hidden) {
			clearInterval(saver)
		} else {
			saver = startAutosave()
		}
	}

	function startAutosave() {
		return setInterval(() => {
			if (Date.now() - lastSave > 3000) {
				save('autosave')
			}
		}, autosaveInterval)
	}

	function activateMode(scope: 'font' | 'theme', mode: string) {
		document.documentElement.dataset[scope] = mode
		localStorage.setItem(scope, mode)
	}

	function loadNotesList() {
		console.debug('Loading notes list')
		getNotes(opfs).then((notes) => {
			hasNotes = notes?.length > 0
			notesEl = getByClass('notes', rootEl) as HTMLUListElement
			if (notesEl) {
				rootEl.removeChild(notesEl)
			}
			notesEl = buildEditor(editor, notes, rootEl, editorEl)
			initNotesListeners()
			return notesEl
		})
	}

	async function processFiles(fileList: FileList) {
		console.debug('File(s) uploading')
		const allowedFiles = ['md', 'txt']
		const files = [...fileList].filter((file) =>
			allowedFiles.includes(file.name.split('.').pop()),
		)
		if (files?.length === 0) return
		if (files.length === 1) {
			save('overwrite')
			files[0].text().then((t) => {
				console.debug(`Replacing`)
				// Generating new ID to avoid overwrites
				setCurrent(newId(), editorEl)
				editor.action(replaceAll(t))
			})
		} else {
			for (const file of files) {
				if (!empty) {
					save('overwrite')
					clearEditor()
				}
				console.debug(`Writing file ${file.name}`)
				await writeToFile(
					editor,
					editorEl,
					opfs,
					newId(),
					stateEl,
					'multiple-drop',
					false,
					await file.text(),
				)
				loadNotesList()
			}
			showState(stateEl, `uploaded ${files.length} files`)
		}
	}

	function clearEditor() {
		console.debug(`Clearing editor`)
		if (![location.origin, location.origin + '/'].includes(location.href)) {
			window.history.pushState({ page: null }, '', '/')
		}
		if (locked) unlock()
		editor.action(replaceAll(''))
		empty = true
		editorEl.focus()
		setCurrent('', editorEl)
	}

	function lock() {
		console.debug(`Locking editor`)
		locked = true
		editorEl.contentEditable = 'false'
		publishEl.parentElement.classList.add('hidden')
		editEl.parentElement.classList.remove('hidden')
	}

	function unlock() {
		console.debug(`Unlocking editor`)
		locked = false
		editorEl.contentEditable = 'true'
		publishEl.parentElement.classList.remove('hidden')
		editEl.parentElement.classList.add('hidden')
	}
</script>
