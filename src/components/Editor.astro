---
import '@styles/header.sass'
import '@styles/editor.sass'
import '@styles/notes.sass'
import { Icon } from 'astro-icon/components'
import { modes } from '@scripts/render/appearance'
import Instructions from '@components/Instructions.astro'
import Shortcuts from '@components/Shortcuts.astro'
---

<header class="editor-header">
	<div class="left" data-context="notes">
		<form>
			<input type="file" multiple accept=".md,.txt" id="upload" />
		</form>
		<button class="back"><Icon name="back" /></button>
		<button class="add"><Icon name="add" /></button>
	</div>
	<div class="right">
		<div class="status"></div>
		<div class="more">
			<button class="show-more"><Icon name="more" /></button>
			<ul class="more-menu">
				<li class="hidden">
					<button class="publish">Publish</button>
				</li>
				<li class="hidden">
					<button class="download">Download</button>
				</li>
				<li><button class="export-all">Export all</button></li>
				<li class="hidden">
					<button class="edit">Copy and edit</button>
				</li>
				<li><hr /></li>
				{
					Object.entries(modes).map(([name, values]) => (
						<li>
							<button class={name}>
								<span>
									{name.charAt(0).toUpperCase() +
										name.substring(1).toLowerCase()}
								</span>
								<span class="value">{values[0]}</span>
							</button>
						</li>
					))
				}
				<li>
					<button class="spell"
						><span>Spellcheck</span><span class="value">on</span
						></button
					>
				</li>
				<li><hr /></li>
				<li>
					<button
						class="md-help"
						data-micromodal-trigger="modal-instructions"
						>How to markdown</button
					>
				</li>
				<li>
					<button
						class="shortcuts"
						data-micromodal-trigger="modal-shortcuts"
						>Shortcuts</button
					>
				</li>
				<li>
					<a href="/hello">About</a>
				</li>
				<!-- <li class="credit">
					by <a href="https://qurle.net">qurle</a>
				</li> -->
			</ul>
		</div>
	</div>
</header>
<main></main>
<Instructions />
<Shortcuts />
<script>
	// Am I an import king now?
	import { Editor, rootCtx } from '@milkdown/kit/core'
	import { clipboard } from '@milkdown/kit/plugin/clipboard'
	import { history } from '@milkdown/kit/plugin/history'
	import { indent } from '@milkdown/kit/plugin/indent'
	import { listener, listenerCtx } from '@milkdown/kit/plugin/listener'
	import { upload } from '@milkdown/kit/plugin/upload'
	import { commonmark } from '@milkdown/kit/preset/commonmark'
	import { gfm } from '@milkdown/kit/preset/gfm'
	import { automd } from '@milkdown/plugin-automd'
	import { replaceAll } from '@milkdown/utils'
	import { buildEditor } from '@scripts/render/buildEditor'
	import { loadCurrentId, setCurrentId } from '@scripts/utils/currentNote'
	import { showBorders } from '@scripts/render/showBorders'
	import { deleteNote } from '@scripts/storage/deleteNote'
	import { exportAll, exportFile } from '@scripts/note/export'
	import { getByClass, getByTag } from '@scripts/utils/getElements'
	import { getNotes } from '@scripts/storage/getNotes'
	import { getOpfs } from '@scripts/storage/getOpfs'
	import { isEmptyString } from '@scripts/utils/isEmptyString'
	import { openInEditor } from '@scripts/render/openInEditor'
	import {
		currentAppearance,
		cycleAppearance,
	} from '@scripts/render/appearance'
	import { publish } from '@scripts/note/publish'
	import { setFocus } from '@scripts/utils/setFocus'
	import { setTitle } from '@scripts/note/setTitle'
	import { setStatusEl, showStatus } from '@scripts/render/showStatus'
	import { writeToFile } from '@scripts/storage/writeToFile'
	import MicroModal from 'micromodal'
	import { state } from '@scripts/state'
	import { save, toggleAutosave } from '@scripts/note/save'
	import { createId } from '@scripts/utils/createId'

	MicroModal.init({ disableFocus: true, debug: false })

	// Elements
	// Move only shared elements to state variable
	const headerEl = getByTag('header')
	const headerLeftEl = getByClass('left', headerEl)
	const uploadInputEl = getByTag('input', headerLeftEl) as HTMLInputElement
	const addEl = getByClass('add', headerLeftEl)
	const backEl = getByClass('back', headerLeftEl)
	const showMoreEl = getByClass('show-more', headerEl)
	const menuEl = getByClass('more-menu', headerEl)
	const downloadEl = getByClass('download', menuEl)
	const exportAllEl = getByClass('export-all', menuEl)
	const publishEl = getByClass('publish', menuEl)
	const editEl = getByClass('edit', menuEl)
	const fontEl = getByClass('font', menuEl)
	const themeEl = getByClass('theme', menuEl)
	const spellEl = getByClass('spell', menuEl)

	// Setting states
	// States are used throughout different methods
	state.opfs = await getOpfs()
	state.notes = await getNotes(state.opfs)
	state.hasNotes = state.notes?.length > 0
	state.updated = false
	state.empty = true
	state.locked = false

	state.rootEl = getByTag('main')

	// Element to show statuses
	setStatusEl(getByClass('status', headerEl))

	console.debug(`Loading editor`)

	state.editor = await Editor.make()
		.use(commonmark)
		.use(gfm)
		.use(history)
		.use(clipboard)
		.use(upload)
		.use(indent)
		.use(listener)
		.use(automd)
		.config((ctx) => {
			ctx.set(rootCtx, state.rootEl)

			const listener = ctx.get(listenerCtx)

			listener.mounted(() => {
				state.editorEl = document.getElementsByClassName(
					'editor',
				)[0] as HTMLDivElement
				state.editorEl.ariaLabel = 'Your note'
				if (state.hasNotes) state.editorEl.classList.add('collapsed')
				state.editorEl.spellcheck =
					localStorage.getItem('spell') === 'true' || false
				state.wasEmpty = true
			})

			listener.updated((ctx, doc) => {
				state.updated = true
				state.empty = doc.content.size <= 2

				showMoreEl.classList.remove('active')

				if (state.empty) {
					if (state.hasNotes)
						state.editorEl.classList.add('collapsed')
					setTimeout(() => {
						state.rootEl.classList.add('notes-shown')
					}, 50)
					headerLeftEl.dataset.context = 'notes'
					updateNotesList()
					setTitle()
					publishEl.parentElement.classList.add('hidden')
					downloadEl.parentElement.classList.add('hidden')
					exportAllEl.parentElement.classList.remove('hidden')
					setCurrentId('')
					state.wasEmpty = true
				} else if (state.wasEmpty) {
					// We don't want to change all this while regular typing

					if (state.hasNotes) {
						state.notesEl.style.visibility = 'hidden'
						state.rootEl.classList.remove('notes-shown')
						state.notesEl.style.visibility = 'visible'
					}
					// Avoid layout colliding
					setTimeout(() => {
						state.editorEl.classList.remove('collapsed')
					}, 50)

					headerLeftEl.dataset.context = 'editor'
					state.wasEmpty = false
					// Change buttons in menu
					if (!state.locked)
						publishEl.parentElement.classList.remove('hidden')
					downloadEl.parentElement.classList.remove('hidden')
					exportAllEl.parentElement.classList.add('hidden')
				}
			})
		})
		.create()

	// Loading note by UUID
	await loadByURL()

	toggleAutosave(true)
	buildEditor()

	// Opening last opened document
	const current = loadCurrentId()
	if (current) {
		const note = state.notes.find((note) => note.id === current)
		if (note) {
			openInEditor(note)
		}
	}

	setFocus(state.editorEl)
	document.addEventListener('visibilitychange', () => {
		toggleAutosave(!document.hidden)
	})

	initShortcuts()

	state.editorEl.addEventListener('keydown', (e) => {
		if (e.key === 'ArrowDown' && state.empty && state.notesEl) {
			;(
				state.notesEl.firstElementChild
					.firstElementChild as HTMLButtonElement
			).focus()
		}
		if (e.key === 'ArrowUp' && state.empty && state.notesEl) {
			;(
				state.notesEl.lastElementChild
					.firstElementChild as HTMLButtonElement
			).focus()
		}
	})

	backEl.addEventListener('click', () => {
		save('clear')
		clearEditor()
	})

	addEl.addEventListener('click', () => {
		uploadInputEl.click()
	})

	uploadInputEl.addEventListener('change', (e: InputEvent) => {
		uploadNotes(uploadInputEl.files)
	})

	showMoreEl.addEventListener('click', () => {
		showMoreEl.classList.toggle('active')
	})

	// Hide menu
	document.documentElement.addEventListener('click', (e: MouseEvent) => {
		if (
			!menuEl.contains(e.target as Node) &&
			!showMoreEl.contains(e.target as Node)
		)
			showMoreEl.classList.remove('active')
	})

	publishEl.addEventListener('click', () => {
		if (state.empty) return
		save('publish', true)
		showMoreEl.classList.remove('active')
		publish(loadCurrentId())
	})

	downloadEl.addEventListener('click', () => {
		if (state.empty) return
		showMoreEl.classList.remove('active')
		exportFile()
	})
	exportAllEl.addEventListener('click', () => {
		showMoreEl.classList.remove('active')
		exportAll()
	})

	editEl.addEventListener('click', () => {
		showMoreEl.classList.remove('active')
		unlock()
		save('copy')
	})

	//
	//! НЕ СОХРАНЯЮТСЯ ЗАМЕТКИ?
	//

	window.addEventListener('beforeunload', () => {
		save('unload')
	})

	initNavigationListener()
	initModeCyclersListenters()
	initNotesListeners()
	initDragAndDrop()

	async function loadByURL() {
		const idEl = document.getElementById('id-storage')
		if (idEl && idEl.dataset.id) {
			state.editorEl.classList.add('loading')
			setCurrentId('')
			lock()
			const { content, clientId } = await fetch(
				`/api/getPublished?id=${idEl.dataset.id}`,
			)
				.then((response) => response.json())
				.catch(() => showStatus(`couldn't load :(`))
			idEl.remove()
			state.editor.action(replaceAll(content))
			state.editorEl.classList.remove('loading')
			if (isEmptyString(content)) return

			const firstBlock =
				(state.editorEl.children[0] as HTMLElement)?.innerText || ''
			if (isEmptyString(firstBlock)) return
			setTitle(firstBlock)
		}
	}

	function initShortcuts() {
		document.addEventListener('keydown', (e) => {
			// Ctrl / Cmd actions
			if (e.ctrlKey || e.metaKey) {
				switch (e.code) {
					case 'KeyS': {
						e.preventDefault()
						if (e.repeat) return
						if (e.shiftKey) {
							if (state.empty) return
							exportFile()
						} else {
							if (e.repeat) return
							if (state.empty) return
							save('shortcut')
						}
						return
					}
					case 'KeyP': {
						if (e.repeat) return
						if (e.shiftKey) {
							e.preventDefault()
							if (state.empty) return
							save('publish', true)
							publish(loadCurrentId())
							return
						}
						break
					}
					case 'KeyE': {
						if (e.repeat) return
						if (e.shiftKey) {
							unlock()
							save('copy')
							return
						}
						break
					}
					case 'KeyD': {
						e.preventDefault()
						if (e.repeat) return
						showBorders(state.rootEl)
						return
					}
					// Mortal combat mode
					case 'KeyO': {
						e.preventDefault()
						if (e.repeat) return
						uploadInputEl.click()
						return
					}
				}
			} else {
				switch (e.code) {
					case 'Escape': {
						e.preventDefault()
						if (getByClass('is-open', document.body)) {
							return
						}
						if (showMoreEl.classList.contains('active')) {
							showMoreEl.classList.remove('active')
							state.editorEl.focus()
							return
						}
						save('clear')
						clearEditor()
						return
					}
				}
			}
		})
	}

	function initModeCyclersListenters() {
		const fontValueEl = getByClass('value', fontEl)
		const themeValueEl = getByClass('value', themeEl)
		const spellValueEl = getByClass('value', spellEl)

		fontValueEl.textContent = currentAppearance('font')
		themeValueEl.textContent = currentAppearance('theme')
		spellValueEl.textContent = state.editorEl.spellcheck ? 'on' : 'off'

		fontEl.addEventListener('click', () => {
			fontValueEl.textContent = cycleAppearance('font')
		})
		themeEl.addEventListener('click', () => {
			themeValueEl.textContent = cycleAppearance('theme')
		})
		spellEl.addEventListener('click', () => {
			state.editorEl.spellcheck = !state.editorEl.spellcheck
			spellValueEl.textContent = state.editorEl.spellcheck ? 'on' : 'off'
			localStorage.setItem('spell', state.editorEl.spellcheck.toString())
		})
	}

	function initDragAndDrop() {
		state.editorEl.addEventListener('dragover', (e) => {
			state.editorEl.classList.add('dragover')
		})
		state.editorEl.addEventListener('dragleave', () => {
			state.editorEl.classList.remove('dragover')
		})
		state.editorEl.addEventListener('drop', (e) => {
			state.editorEl.classList.remove('dragover')
			e.preventDefault()
			uploadNotes(e.dataTransfer.files)
		})
	}

	function initNotesListeners() {
		// Probably the worst code I ever wrote
		if (state.hasNotes) {
			;[
				...(state.notesEl.getElementsByClassName(
					'note',
				) as HTMLCollectionOf<HTMLButtonElement>),
			].forEach((noteEl) => {
				noteEl
					.getElementsByClassName('delete')[0]
					.addEventListener('click', (e: MouseEvent) => {
						e.stopPropagation()
						const confirmed = e.shiftKey
						deleteNote(noteEl, state.opfs, confirmed)
						updateNotesList()
					})

				noteEl.addEventListener('keydown', (e) => {
					const buttonEl = e.target as HTMLButtonElement
					if (e.key === 'ArrowDown' && state.empty && state.notesEl) {
						const nextLi = buttonEl.parentElement
							.nextElementSibling as HTMLLIElement
						if (nextLi)
							(
								nextLi.firstElementChild as HTMLButtonElement
							).focus()
						else state.editorEl.focus()
					}
					if (e.key === 'ArrowUp' && state.empty && state.notesEl) {
						const prevLi = buttonEl.parentElement
							.previousElementSibling as HTMLLIElement
						if (prevLi)
							(
								prevLi.firstElementChild as HTMLButtonElement
							).focus()
						else state.editorEl.focus()
					}
					if (
						(e.key === 'Backspace' || e.key === 'Delete') &&
						state.empty &&
						state.notesEl
					) {
						const nextLi = buttonEl.parentElement
							.nextElementSibling as HTMLLIElement

						const confirmed = e.shiftKey
						deleteNote(noteEl, state.opfs, confirmed)

						if (nextLi)
							(
								nextLi.firstElementChild as HTMLButtonElement
							).focus()
						else state.editorEl.focus()
					}
				})
			})
		}
	}

	function initNavigationListener() {
		window.addEventListener('popstate', (e) => {
			e.preventDefault()
			console.debug(e)
			if (e.state.page === null) {
				save('clear')
				clearEditor()
			}
		})
	}

	function updateNotesList() {
		console.debug('Updating notes list')
		getNotes(state.opfs).then((notes) => {
			state.hasNotes = notes?.length > 0
			state.notesEl = getByClass(
				'notes',
				state.rootEl,
			) as HTMLUListElement
			if (state.notesEl) {
				state.rootEl.removeChild(state.notesEl)
			}
			buildEditor()
			initNotesListeners()
			return state.notesEl
		})
	}

	async function uploadNotes(fileList: FileList) {
		console.debug('File(s) uploading')
		const allowedFiles = ['md', 'txt']
		const files = [...fileList].filter((file) =>
			allowedFiles.includes(file.name.split('.').pop()),
		)
		if (files?.length === 0) return
		if (files.length === 1) {
			save('overwrite')
			files[0].text().then((t) => {
				console.debug(`Replacing`)
				// Generating new ID to avoid overwrites
				setCurrentId(createId())
				state.editor.action(replaceAll(t))
			})
		} else {
			for (const file of files) {
				if (!state.empty) {
					save('overwrite')
					clearEditor()
				}
				console.debug(`Writing file ${file.name}`)
				await writeToFile(
					createId(),
					'multiple-drop',
					false,
					await file.text(),
				)
				updateNotesList()
			}
			showStatus(`uploaded ${files.length} files`)
		}
	}

	function clearEditor() {
		console.debug(`Clearing editor`)
		if (![location.origin, location.origin + '/'].includes(location.href)) {
			window.history.pushState({ page: null }, '', '/')
		}
		if (state.locked) unlock()
		state.editor.action(replaceAll(''))
		state.empty = true
		state.editorEl.focus()
		setCurrentId('')
	}

	function lock() {
		console.debug(`Locking editor`)
		state.locked = true
		state.editorEl.contentEditable = 'false'
		publishEl.parentElement.classList.add('hidden')
		editEl.parentElement.classList.remove('hidden')
	}

	function unlock() {
		console.debug(`Unlocking editor`)
		state.locked = false
		state.editorEl.contentEditable = 'true'
		publishEl.parentElement.classList.remove('hidden')
		editEl.parentElement.classList.add('hidden')
	}
</script>
