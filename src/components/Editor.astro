---
import Menu from './Menu.astro'
import '@styles/header.sass'
import '@styles/editor.sass'
import '@styles/notes.sass'
import { Icon } from 'astro-icon/components'
import { modes } from '@utils/cycleModes'
---

<header class="editor-header">
	<div class="left" data-context="notes">
		<button class="back"><Icon name="back" /></button>
		<button class="add"><Icon name="add" /></button>
	</div>
	<div class="right">
		<div class="state">saved</div>
		<div class="more">
			<button class="show-more"><Icon name="more" /></button>
			<ul class="more-menu">
				<li><button class="export">Export file</button></li>
				{
					Object.entries(modes).map(([name, values]) => (
						<li>
							<span>
								{name.charAt(0).toUpperCase() +
									name.substring(1).toLowerCase()}
							</span>
							<menu class={name}>
								{values.map((value) => (
									<li>
										<button class={value}>
											{name === 'font'
												? `${value.charAt(0).toUpperCase()}${value.substring(1).toLowerCase()}`
												: ''}
										</button>
									</li>
								))}
							</menu>
						</li>
					))
				}
				<li class="credit">byÂ <a href="https://qurle.net">qurle</a></li>
			</ul>
		</div>
	</div>
</header>
<main></main>
<script>
	import { Editor, rootCtx } from '@milkdown/kit/core'
	import { clipboard } from '@milkdown/kit/plugin/clipboard'
	import { history } from '@milkdown/kit/plugin/history'
	import { indent } from '@milkdown/kit/plugin/indent'
	import { listener, listenerCtx } from '@milkdown/kit/plugin/listener'
	import { upload } from '@milkdown/kit/plugin/upload'
	import { commonmark } from '@milkdown/kit/preset/commonmark'
	import { replaceAll } from '@milkdown/utils'
	import { buildEditor } from '@utils/buildEditor'
	import { debug } from '@utils/debug'
	import { del } from '@utils/del'
	import { exportFile } from '@utils/exportFile'
	import { focusToEnd } from '@utils/focusToEnd'
	import { getNotes } from '@utils/getNotes'
	import { save } from '@utils/save'
	import { nanoid } from 'nanoid/non-secure'

	// Utilities
	const autosaveInterval = 5_000
	// Other
	const opfs = await (
		await navigator.storage.getDirectory()
	).getDirectoryHandle('md', { create: true })
	const headerEl = document.getElementsByTagName('header')[0] as HTMLElement
	const headerLeftEl = headerEl.getElementsByClassName(
		'left',
	)[0] as HTMLElement
	const addEl = headerLeftEl.getElementsByClassName(
		'add',
	)[0] as HTMLButtonElement
	const backEl = headerEl.getElementsByClassName(
		'back',
	)[0] as HTMLButtonElement
	const stateEl = headerEl.getElementsByClassName('state')[0] as HTMLElement
	const showMoreEl = headerEl.getElementsByClassName(
		'show-more',
	)[0] as HTMLButtonElement
	const fontsEl = Array.from(
		headerEl
			.getElementsByClassName('font')[0]
			.getElementsByTagName('button'),
	)
	const themeEl = Array.from(
		headerEl
			.getElementsByClassName('theme')[0]
			.getElementsByTagName('button'),
	)

	const rootEl = document.getElementsByTagName('main')[0] as HTMLElement
	const notes = await getNotes(opfs)

	// Assinged selectors
	let editorEl: HTMLDivElement = null
	let notesEl: HTMLUListElement = null
	// States
	let updated = false
	let empty = true
	let hasNotes = notes?.length > 0
	let lastSave = Date.now()

	const editor = await Editor.make()
		.use(commonmark)
		.use(history)
		.use(clipboard)
		.use(upload)
		.use(indent)
		.use(listener)
		.config((ctx) => {
			ctx.set(rootCtx, rootEl)
			const listener = ctx.get(listenerCtx)

			listener.mounted(() => {
				editorEl = (
					document.getElementsByClassName(
						'editor',
					) as HTMLCollectionOf<HTMLDivElement>
				)[0]
				if (hasNotes) editorEl.classList.add('collapsed')
				editorEl.ariaLabel = 'Your note'
			})

			listener.updated((ctx, doc) => {
				updated = true

				if (doc.content.size <= 2) {
					empty = true
					if (hasNotes) editorEl.classList.add('collapsed')
					setTimeout(() => {
						rootEl.classList.add('notes-shown')
					}, 50)
					headerLeftEl.dataset.context = 'notes'
					getNotes(opfs).then((notes) => {
						hasNotes = notes?.length > 0
						if (notesEl) {
							rootEl.removeChild(notesEl)
						}
						notesEl = buildEditor(
							editor,
							notes,
							rootEl,
							editorEl,
							true,
						)
						initNotesListeners()
					})

					editorEl.dataset.id = ''
				} else {
					empty = false
					if (hasNotes) rootEl.classList.remove('notes-shown')
					setTimeout(() => {
						editorEl.classList.remove('collapsed')
					}, 50)
					headerLeftEl.dataset.context = 'editor'
					showMoreEl.classList.remove('active')
				}
			})
		})
		.create()

	let saver = startAutosave()

	const exportButtonEl = headerEl.getElementsByClassName('export')[0]
	notesEl = buildEditor(editor, notes, rootEl, editorEl, true)

	focusToEnd(editorEl)
	document.addEventListener('visibilitychange', toggleAutosave)

	document.addEventListener('keydown', (e) => {
		if ((e.ctrlKey || e.metaKey) && e.key === 's') {
			e.preventDefault()
			if (e.repeat) return
			if (e.shiftKey) {
				exportFile(editor, editorEl, stateEl)
			} else {
				if (!editorEl.dataset?.id) editorEl.dataset.id = nanoid(10)
				save(
					editor,
					editorEl,
					opfs,
					editorEl.dataset.id,
					stateEl,
					'shortcut',
				)
				updated = false
			}
		}
		if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
			e.preventDefault()
			if (e.repeat) return
			debug(rootEl)
		}
		if (e.key === 'Escape') {
			if (updated && !empty) {
				if (!editorEl.dataset?.id) editorEl.dataset.id = nanoid(10)
				save(
					editor,
					editorEl,
					opfs,
					editorEl.dataset.id,
					stateEl,
					'clear',
				)
				updated = false
			}
			editor.action(replaceAll(''))
		}
	})

	editorEl.addEventListener('keydown', (e) => {
		if (e.key === 'ArrowDown' && empty && notesEl) {
			;(
				notesEl.firstElementChild.firstElementChild as HTMLButtonElement
			).focus()
		}
		if (e.key === 'ArrowUp' && empty && notesEl) {
			;(
				notesEl.lastElementChild.firstElementChild as HTMLButtonElement
			).focus()
		}
	})

	backEl.addEventListener('click', () => {
		if (updated && !empty) {
			if (!editorEl.dataset?.id) editorEl.dataset.id = nanoid(10)
			save(editor, editorEl, opfs, editorEl.dataset.id, stateEl, 'clear')
			updated = false
		}
		editor.action(replaceAll(''))
	})

	showMoreEl.addEventListener('click', () => {
		showMoreEl.classList.toggle('active')
	})

	initModeSwitchListeners()
	initNotesListeners()

	function initModeSwitchListeners() {
		fontsEl
			.find((el) =>
				el.classList.contains(document.documentElement.dataset.font),
			)
			.classList.add('current')

		themeEl
			.find((el) => {
				return el.classList.contains(
					document.documentElement.dataset.theme,
				)
			})
			.classList.add('current')

		fontsEl.forEach((button) => {
			button.addEventListener('click', () => {
				fontsEl.forEach((el) => el.classList.remove('current'))
				activateMode('font', button.className)
				button.classList.add('current')
			})
		})

		themeEl.forEach((button) => {
			button.addEventListener('click', () => {
				themeEl.forEach((el) => el.classList.remove('current'))
				activateMode('theme', button.className)
				button.classList.add('current')
			})
		})
	}

	function initNotesListeners() {
		// Probably the worst code I ever wrote
		if (hasNotes) {
			;[
				...(notesEl.getElementsByClassName(
					'note',
				) as HTMLCollectionOf<HTMLButtonElement>),
			].forEach((noteEl) => {
				noteEl
					.getElementsByClassName('delete')[0]
					.addEventListener('click', (e: MouseEvent) => {
						e.stopPropagation()
						const confirmed = e.shiftKey
						del(noteEl.dataset.id, opfs, confirmed)
					})

				noteEl.addEventListener('keydown', (e) => {
					const buttonEl = e.target as HTMLButtonElement
					if (e.key === 'ArrowDown' && empty && notesEl) {
						const nextLi = buttonEl.parentElement
							.nextElementSibling as HTMLLIElement
						if (nextLi)
							(
								nextLi.firstElementChild as HTMLButtonElement
							).focus()
						else editorEl.focus()
					}
					if (e.key === 'ArrowUp' && empty && notesEl) {
						const prevLi = buttonEl.parentElement
							.previousElementSibling as HTMLLIElement
						if (prevLi)
							(
								prevLi.firstElementChild as HTMLButtonElement
							).focus()
						else editorEl.focus()
					}
				})
			})
		}
	}

	exportButtonEl.addEventListener('click', () => {
		exportFile(editor, editorEl, stateEl)
	})

	window.addEventListener('beforeunload', () => {
		if (updated && !empty) {
			if (!editorEl.dataset?.id) editorEl.dataset.id = nanoid(10)
			save(editor, editorEl, opfs, editorEl.dataset.id, stateEl, 'reload')
			updated = false
		}
	})

	function toggleAutosave() {
		if (document.hidden) {
			clearInterval(saver)
		} else {
			saver = startAutosave()
		}
	}

	function startAutosave() {
		return setInterval(() => {
			if (updated && !empty && Date.now() - lastSave > 3000) {
				if (!editorEl.dataset?.id) editorEl.dataset.id = nanoid(10)
				save(editor, editorEl, opfs, editorEl.dataset.id, stateEl)
				updated = false
			}
		}, autosaveInterval)
	}

	function activateMode(scope: 'font' | 'theme', mode: string) {
		document.documentElement.dataset[scope] = mode
		localStorage.setItem(scope, mode)
	}
</script>
