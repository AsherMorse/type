---
import "@styles/bottom-input.sass";
---

<div class="bottom-input" aria-live="polite">
  <div class="input-content">
    <form>
      <button
        type="button"
        class="side-button left"
        aria-label="Formatting options"
        onclick="window.toggleFormatMenu()"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <line x1="4" y1="6" x2="20" y2="6"></line>
          <line x1="4" y1="12" x2="20" y2="12"></line>
          <line x1="4" y1="18" x2="20" y2="18"></line>
        </svg>
      </button>
      <textarea placeholder="Enter text..." rows="1"></textarea>
      <button
        type="button"
        class="side-button right"
        aria-label="Submit"
        onclick="window.handleButtonClick(this)"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </form>
  </div>
</div>

<script>
  // @ts-nocheck
  import { state } from "@scripts/state";
  import { updateUserState } from "@scripts/state";
  import { editorViewCtx, commandsCtx, parserCtx } from "@milkdown/kit/core";
  import { replaceAll, insert } from "@milkdown/kit/utils";

  interface Window {
    currentEditor: any;
    getCurrentNoteContent: () => string;
    handleAiCommand: (text: string) => Promise<void>;
    showBottomInput: (
      placeholder: string,
      onSubmit: (value: string) => void,
    ) => void;
    bottomInputTimeout: number;
    handleButtonClick: (button: HTMLElement) => void;
    showBottomAlert: (message: string, duration?: number) => void;
  }

  // AI Assistant functionality
  window.getCurrentNoteContent = function () {
    if (state.editorVersion === "2") {
      return state.editor2?.storage.markdown.getMarkdown() || "";
    }
    return (
      state.editor?.action((ctx) =>
        ctx.get(editorViewCtx).state.doc.toString(),
      ) || ""
    );
  };

  // @ts-ignore
  window.handleAiCommand = async function (text) {
    try {
      // Check auth state first
      await updateUserState();

      const response = await fetch(`/api/ai/format`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          "X-Requested-With": "XMLHttpRequest",
        },
        body: JSON.stringify({
          message: text,
          noteContext: window.getCurrentNoteContent(),
        }),
        credentials: "include",
        mode: "cors",
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to format text");
      }

      const data = await response.json();

      // Handle insertion based on editor version
      if (state.editorVersion === "2") {
        if (!state.editor2) {
          throw new Error("No active editor found (v2)");
        }

        // Replace content with markdown parsing
        state.editor2.commands.setContent(data.content, true);
        state.editor2.commands.focus();
      } else {
        if (!state.editor) {
          throw new Error("No active editor found (v1)");
        }

        // For Milkdown, use replaceAll to handle markdown content
        state.editor.action((ctx) => {
          const view = ctx.get(editorViewCtx);
          const { state: editorState } = view;

          // Create a transaction to replace content
          const tr = editorState.tr.delete(0, editorState.doc.content.size);

          // Parse and insert markdown
          const parser = ctx.get(parserCtx);
          const doc = parser(data.content);
          if (doc) {
            tr.insert(0, doc);
          }

          view.dispatch(tr);
          view.focus();
        });
      }

      window.showBottomAlert("Content updated", 2000);
    } catch (error) {
      console.error("AI formatting error:", error);
      window.showBottomAlert(error.message || "Failed to format text", 3000);
    }
  };

  // Track if input is shown to prevent multiple instances
  let isInputShown = false;

  // Default submit handler
  const defaultSubmitHandler = (e: Event) => {
    e.preventDefault();
    const formEl = e.target as HTMLFormElement;
    const inputEl = formEl.querySelector("textarea") as HTMLTextAreaElement;
    const value = inputEl.value;

    if (!value.trim()) return;

    window.handleAiCommand(value);
    inputEl.value = ""; // Clear the input
  };

  // Add default submit handler to form
  const formEl = document.querySelector(".bottom-input form");
  formEl?.addEventListener("submit", defaultSubmitHandler);

  // Initialize the global function
  window.showBottomInput = function (
    placeholder = "Enter text...",
    onSubmit: (value: string) => void,
  ) {
    if (isInputShown) return;
    isInputShown = true;

    const bottomInputEl = document.querySelector(
      ".bottom-input",
    ) as HTMLElement;
    const inputEl = bottomInputEl.querySelector(
      "textarea",
    ) as HTMLTextAreaElement;
    const formEl = bottomInputEl.querySelector("form") as HTMLFormElement;

    // Clear any existing timeout
    if (window.bottomInputTimeout) {
      clearTimeout(window.bottomInputTimeout);
    }

    // Function to adjust textarea height
    const adjustHeight = () => {
      // Reset height to auto first to get the correct scrollHeight
      inputEl.style.height = "auto";
      // Set to scrollHeight to expand the textarea
      inputEl.style.height = inputEl.scrollHeight + "px";
    };

    // Reset and show input
    inputEl.value = "";
    inputEl.placeholder = placeholder;
    bottomInputEl.classList.add("show");
    inputEl.focus();
    // Initial height adjustment
    requestAnimationFrame(adjustHeight);

    // Handle submit
    const handleSubmit = (e: Event) => {
      e.preventDefault();
      const value = inputEl.value;
      if (onSubmit && value.trim()) {
        // Only submit if there's content
        onSubmit(value);
      }
      inputEl.value = ""; // Clear the input
      bottomInputEl.classList.remove("show");
      isInputShown = false;
    };

    // Add event listeners
    const handleKeydown = (e: KeyboardEvent) => {
      // Allow Shift+Enter for new lines
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        formEl.requestSubmit();
        return;
      }
      if (e.key === "Escape") {
        bottomInputEl.classList.remove("show");
        isInputShown = false;
        return;
      }
      // Adjust height on any other key press
      requestAnimationFrame(adjustHeight);
    };

    // Add input listener for auto-height
    inputEl.addEventListener("input", () =>
      requestAnimationFrame(adjustHeight),
    );
    inputEl.addEventListener("keydown", handleKeydown);
    formEl.addEventListener("submit", handleSubmit);

    // Cleanup function
    const cleanup = () => {
      inputEl.removeEventListener("input", () =>
        requestAnimationFrame(adjustHeight),
      );
      inputEl.removeEventListener("keydown", handleKeydown);
      formEl.removeEventListener("submit", handleSubmit);
    };

    // Auto cleanup after component is hidden
    bottomInputEl.addEventListener("transitionend", cleanup, { once: true });
  };

  // Add keyboard shortcut listener
  document.addEventListener("keydown", (e: KeyboardEvent) => {
    // Check for Cmd/Ctrl + K
    if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === "k") {
      e.preventDefault(); // Prevent default browser behavior
      window.showBottomInput("Type a command...", (value) => {
        window.handleAiCommand(value);
      });
    }
  });

  window.handleButtonClick = function (button: HTMLElement) {
    const formEl = button.closest("form");
    if (formEl) {
      const event = new SubmitEvent("submit", { cancelable: true });
      formEl.dispatchEvent(event);
    }
  };

  // Add input content check
  const textarea = document.querySelector(
    ".bottom-input textarea",
  ) as HTMLTextAreaElement;
  const submitButton = document.querySelector(
    ".bottom-input .side-button.right",
  ) as HTMLButtonElement;

  // Initial state
  submitButton.classList.add("disabled");

  textarea.addEventListener("input", () => {
    if (textarea.value.trim()) {
      submitButton.classList.remove("disabled");
    } else {
      submitButton.classList.add("disabled");
    }
  });
</script>
